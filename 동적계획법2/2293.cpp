// 동전 1
// k가 구하고 싶은 값이고 1, 2, 3원짜리 동전을 가지고 있을 때
// k = 1,
// 1원짜리 동전 하나만을 사용할 수 있다
// dp[1] = 1
// k = 2,
// 2원짜리 동전 하나만을 사용하는 경우와
// 1원짜리 동전을 두개 사용하는 경우가 있다
// dp[2] = 2
// k = 3,
// 3원짜리 동전 하나만을 사용하는 경우와
// 2원짜리 동전을 사용하는 경우 + 1원짜리 동전을 사용하는 경우
// 1원짜리 동전을 사용하는 경우 + 2원짜리 동전을 사용하는 경우로 나눌 수 있다
// dp[3] = 3

// 위와 같은 방법으로 6원을 구하는 경우의 수는
// 5원을 구하는 경우의 수 (5원 + 1원짜리 동전 사용)
// 4원을 구하는 경우의 수 (4원 + 2원짜리 동전 사용)
// 3원을 구하는 경우의 수 (3원 + 3원짜리 동전 사용)
// 위 값을 전부 더한 값이 된다

// 현재 가진 동전 coin_value를 사용해서 구할 수 있는 경우의 수는
// dp[k] = dp[0] ~ dp[k - coin_value] 까지 모두 더한 값이 된다


#include <iostream>

using namespace std;

int n, k;
int coins[101];
int dp[100001];

int main()
{
  cin >> n >> k;

  int i, j;
  for(i = 0; i < n; i++)
  {
    cin >> coins[i];
  }

  dp[0] = 1;
  for(i = 0; i < n; i++)
  {
    for(j = coins[i]; j <= k; j++)
    {
      dp[j] = dp[j] + dp[j-coins[i]];
    }
  }

  cout << dp[k] << endl;

  return 0;
}
